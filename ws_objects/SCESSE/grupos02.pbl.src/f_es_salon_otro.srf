$PBExportHeader$f_es_salon_otro.srf
global type f_es_salon_otro from function_object
end type

forward prototypes
global function boolean f_es_salon_otro (string as_cve_salon, ref string as_clase_aula)
end prototypes

global function boolean f_es_salon_otro (string as_cve_salon, ref string as_clase_aula);//f_es_salon_otro
// Parametros:	string as_cve_salon  value
// 				string as_clase_aula reference
// Regresa	 : booleano que indica si existe el salon

integer li_codigo_sql, li_bloqueado
string ls_mensaje_sql, ls_clase_aula, ls_cve_salon

ls_clase_aula= ""

if as_cve_salon = "" or isnull(as_cve_salon) then
	as_cve_salon = ls_clase_aula
	return false	
end if

select salon.cve_salon, 
		 salon.clase_aula
INTO	:ls_cve_salon, 
		:ls_clase_aula
from  salon
where  clase_aula not LIKE '%TALLER%'
and 	clase_aula not LIKE  '%SALON%'
and 	clase_aula not LIKE  '%LAB%'
and 	clase_aula not LIKE  '%COMPU%'
and 	cve_salon = :as_cve_salon
USING gtr_sce;


li_codigo_sql = gtr_sce.SqlCode
ls_mensaje_sql = gtr_sce.SqlErrText

if isnull(ls_cve_salon) then
	SetNull(ls_clase_aula)
end if

as_clase_aula= ls_clase_aula
//Si no se encontraron registros, o el valor del registro es nulo
if li_codigo_sql = 100 or isnull(ls_cve_salon) then
	return false
elseif li_codigo_sql = -1 then
	MessageBox("Error al consultar salones de tipo OTROS", ls_mensaje_sql)
	return false
end if

return true

end function

