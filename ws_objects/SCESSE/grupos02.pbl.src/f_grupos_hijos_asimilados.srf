$PBExportHeader$f_grupos_hijos_asimilados.srf
global type f_grupos_hijos_asimilados from function_object
end type

forward prototypes
global function boolean f_grupos_hijos_asimilados (long al_cve_mat, string as_gpo, integer ai_periodo, integer ai_anio)
end prototypes

global function boolean f_grupos_hijos_asimilados (long al_cve_mat, string as_gpo, integer ai_periodo, integer ai_anio);//Esta funcion actualiza el cupo, los inscritos y el profesor 
//de un grupo que está asmilando a otros

integer  li_codigo_sql, li_cupo, li_inscritos, li_cve_profesor
string ls_mensaje_sql
long ll_cuenta

SELECT dbo.grupos.cupo,
		dbo.grupos.inscritos,
		dbo.grupos.cve_profesor
INTO	:li_cupo,
		:li_inscritos,
		:li_cve_profesor
FROM	dbo.grupos
WHERE dbo.grupos.cve_mat = :al_cve_mat
AND	dbo.grupos.gpo = :as_gpo
AND	dbo.grupos.periodo = :ai_periodo
AND	dbo.grupos.anio = :ai_anio
AND	dbo.grupos.cond_gpo = 1
USING gtr_sce;

li_codigo_sql = gtr_sce.SqlCode
ls_mensaje_sql = gtr_sce.SqlErrText

if li_codigo_sql = 100 or isnull(ll_cuenta) or ll_cuenta = 0 then
	return false
elseif li_codigo_sql = -1 then
	MessageBox("Error al consultar grupos que asimilan", ls_mensaje_sql)
	return false
end if

//FROM	dbo.grupos
//WHERE dbo.grupos.cve_asimilada = :al_cve_mat
//AND	dbo.grupos.gpo_asimilado = :as_gpo
//AND	dbo.grupos.periodo = :ai_periodo
//AND	dbo.grupos.anio = :ai_anio
//AND	dbo.grupos.cond_gpo = 1
//USING gtr_sce;



return true
end function

