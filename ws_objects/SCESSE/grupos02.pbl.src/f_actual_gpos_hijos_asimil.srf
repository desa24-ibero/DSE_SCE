$PBExportHeader$f_actual_gpos_hijos_asimil.srf
global type f_actual_gpos_hijos_asimil from function_object
end type

forward prototypes
global function integer f_actual_gpos_hijos_asimil (long al_cve_mat, string as_gpo, integer ai_periodo, integer ai_anio)
end prototypes

global function integer f_actual_gpos_hijos_asimil (long al_cve_mat, string as_gpo, integer ai_periodo, integer ai_anio);//Esta funcion actualiza el cupo, los inscritos y el profesor 
//de un grupo que está asmilando a otros

integer  li_codigo_sql, li_cupo, li_inscritos, li_cve_profesor
string ls_mensaje_sql
long ll_cuenta

//Obtiene el cupo y el profesor del horario base
SELECT dbo.grupos.cupo,
		dbo.grupos.cve_profesor
INTO	:li_cupo,
		:li_cve_profesor
FROM	dbo.grupos
WHERE dbo.grupos.cve_mat = :al_cve_mat
AND	dbo.grupos.gpo = :as_gpo
AND	dbo.grupos.periodo = :ai_periodo
AND	dbo.grupos.anio = :ai_anio
USING gtr_sce;

li_codigo_sql = gtr_sce.SqlCode
ls_mensaje_sql = gtr_sce.SqlErrText

if li_codigo_sql = 100 then
	MessageBox("Error al consultar hijos de grupos que asimilan",&
	    "El grupo ["+string(al_cve_mat)+"-"+as_gpo+"] no existe." )
	return li_codigo_sql
elseif li_codigo_sql = -1 then
	MessageBox("Error al consultar hijos de grupos que asimilan", ls_mensaje_sql)
	return li_codigo_sql
end if

//Cuenta los inscritas del grupo actual y de los grupos que asimila
li_inscritos = f_actual_mi_hijos_asimil(al_cve_mat, as_gpo, ai_periodo, ai_anio)

if li_inscritos = -1 then
	return li_inscritos
end if

//Actualiza los hijos asimilados con los valores correspondientes a los valores
//del padre y los calculados dependientes
UPDATE dbo.grupos
SET   dbo.grupos.cupo =:li_cupo,
		dbo.grupos.inscritos = :li_inscritos,
		dbo.grupos.cve_profesor = :li_cve_profesor
FROM	dbo.grupos
WHERE dbo.grupos.cve_asimilada = :al_cve_mat
AND	dbo.grupos.gpo_asimilado = :as_gpo
AND	dbo.grupos.periodo = :ai_periodo
AND	dbo.grupos.anio = :ai_anio
USING gtr_sce;

li_codigo_sql = gtr_sce.SqlCode
ls_mensaje_sql = gtr_sce.SqlErrText

if li_codigo_sql = -1 then
	ROLLBACK USING gtr_sce;
	MessageBox("Error al actualizar hijos de grupos que asimilan", ls_mensaje_sql)
	return li_codigo_sql
else
	COMMIT USING gtr_sce;
end if

//Actualiza el grupo que asimila en base a los valores calculados
UPDATE dbo.grupos
SET   dbo.grupos.inscritos = :li_inscritos
FROM	dbo.grupos
WHERE dbo.grupos.cve_mat = :al_cve_mat
AND	dbo.grupos.gpo = :as_gpo
AND	dbo.grupos.periodo = :ai_periodo
AND	dbo.grupos.anio = :ai_anio
USING gtr_sce;

li_codigo_sql = gtr_sce.SqlCode
ls_mensaje_sql = gtr_sce.SqlErrText

if li_codigo_sql = -1 then
	ROLLBACK USING gtr_sce;
	MessageBox("Error al actualizar grupos que asimilan", ls_mensaje_sql)
	return li_codigo_sql
else
	COMMIT USING gtr_sce;
end if


return li_codigo_sql
end function

