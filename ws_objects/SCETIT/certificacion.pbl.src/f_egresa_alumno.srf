$PBExportHeader$f_egresa_alumno.srf
global type f_egresa_alumno from function_object
end type

forward prototypes
global function integer f_egresa_alumno (long al_cuenta, long al_cve_carrera)
end prototypes

global function integer f_egresa_alumno (long al_cuenta, long al_cve_carrera);//f_egresa_alumno
//Egresa al alumno correspondiente
//Recibe			al_cuenta		long
//      			al_cve_carrera	long
//Devuelve		integer
//IMPORTANTE: Se debe revisar si el alumno concluyó sus estudios antes de invocar este procedimiento


integer li_codigo_sql, li_num_academicos, li_egresado, li_valor_egresado = 1, li_proc_mat_insc= 5
string ls_mensaje_sql, ls_dia

SELECT dbo.academicos.egresado
INTO	:li_egresado
FROM	dbo.academicos
WHERE dbo.academicos.cuenta = :al_cuenta
AND   dbo.academicos.cve_carrera = :al_cve_carrera
USING gtr_sce;

li_codigo_sql = gtr_sce.SqlCode
ls_mensaje_sql = gtr_sce.SqlErrText


if li_codigo_sql = 100 then
	MessageBox("Academicos inexistentes", "El alumno con cuenta ["+string(al_cuenta)+"] no tiene academicos", StopSign!)
	return -1
elseif li_codigo_sql = -1 then
	MessageBox("Error al consultar academicos", ls_mensaje_sql,StopSign!)
	return  -1
end if

if isnull(li_egresado) then
	li_egresado = 0
end if

if li_egresado = 0 then
	
	UPDATE dbo.academicos
	SET dbo.academicos.egresado = :li_valor_egresado,
		dbo.academicos.periodo_egre = dbo.periodos_por_procesos.periodo,
		dbo.academicos.anio_egre = dbo.periodos_por_procesos.anio
	FROM	dbo.academicos, dbo.periodos_por_procesos
	WHERE dbo.academicos.cuenta = :al_cuenta
	AND   dbo.academicos.cve_carrera = :al_cve_carrera
	AND	dbo.periodos_por_procesos.cve_proceso = :li_proc_mat_insc
	USING gtr_sce;

	li_codigo_sql = gtr_sce.SqlCode
	ls_mensaje_sql = gtr_sce.SqlErrText	

	if  li_codigo_sql = -1 then
		ROLLBACK USING gtr_sce;
		MessageBox("Error al actualizar academicos", ls_mensaje_sql,StopSign!)	
		return  -1
	elseif li_codigo_sql = 0 then
		COMMIT USING gtr_sce;
		return 1
	end if
	
elseif li_egresado = 1 then
	
	return 1
	
end if

return 1

end function

