$PBExportHeader$f_transfiere_mov_estac_alumno.srf
global type f_transfiere_mov_estac_alumno from function_object
end type

forward prototypes
global function integer f_transfiere_mov_estac_alumno (long al_cuenta, ref n_tr atr_sit, ref n_tr atr_esta)
end prototypes

global function integer f_transfiere_mov_estac_alumno (long al_cuenta, ref n_tr atr_sit, ref n_tr atr_esta);//Presupone que ya está detenido el motor de transferencia, por lo que si no lo está manda un error y termina
//f_transfiere_mov_estac_alumno
//Recibe:
//long			al_cuenta
//n_tr	atr_sit
//n_tr	atr_esta

//
//Regresa:
//long 		integer


string 		ls_error, ls_instruccion, ls_consulta, ls_error_exec, ls_error_sin
integer 		li_detenido, li_estatus, li_regresa, li_retrieve_movalumnos_sql
integer 		mov_alumnos_sql
datetime 	fecha_vencimiento, fecha
long 			ll_total_leidos, ll_total_procesados, ll_renglon_nvo
n_tr 	ltr_sit, ltr_esta
datastore 	lds_mov_alumnos, lds_movalumnos_sql, lds_info


//SI NO esta conectado al estacionamiento, se conecta
if isvalid(atr_esta)  then
	if f_conecta_con_parametros_n_tr_bd(gtr_sce, ltr_esta, 3 )=0 then
		messagebox("Atención...", "Problemas al conectarse a la bd de estacionamiento")
		return -1
	end if 
else
	ltr_esta = atr_esta
end if

//SI NO esta conectado a tesorería, se conecta
if not isvalid(atr_sit) then
	if f_conecta_pas_parametros_n_tr_bd(gtr_sce, ltr_sit, 2, gs_usuario, gs_password )=0 then
		messagebox("Atención...", "Problemas al conectarse a la bd de tesoreria")
		return -1
	else
		gtr_sit = atr_sit
	end if 
else
	gtr_sit = atr_sit
	ltr_sit = atr_sit
end if


//Si el motor de transferencia no está detenido, no es posible continuar
li_detenido = f_trans_sql_syb_detenido(ls_error)
choose case li_detenido
	case 0
		Messagebox("Error en Motor de Transferencia","El motor de transferencia NO está detenido, favor de deterlo antes",StopSign!)
		return -1
	case -1
		Messagebox("Error en Motor de Transferencia","El motor de transferencia NO se puede consultar.~n"+ls_error,StopSign!)
		return -1	
end choose

		
	// DATASTORE PARA LA TABLA MOV_ALUMNOS
	lds_mov_alumnos = CREATE datastore
	lds_mov_alumnos.dataobject = "d_gral_graba_movalumnos"
	lds_mov_alumnos.settransobject( ltr_sit )
		
//	Generacion de consolidados por cuenta de la base de Estacionamiento
	ls_instruccion = "sp_GenerarConsolidadosXcta "+ string(al_cuenta)
	ls_consulta = ltr_esta.SyntaxFromSQL(ls_instruccion,'Style(Type=Grid)', ls_error_exec)
	if  len(ls_error_exec) > 0 then
			MessageBox("Control de Estacionamiento ", "No es posible ejecutar sp_GenerarConsolidadosXcta:["+string(al_cuenta)+"-"+obten_digito(al_cuenta)+"]"+ ls_error_exec, StopSign! )
			return -1
	else
		lds_info = CREATE datastore
		lds_info.Create(ls_consulta, ls_error_sin)
		lds_info.settransobject( ltr_esta)
// Consulta el resultado de la generación de consolidados por cuenta
		li_regresa = lds_info.retrieve()		
		if li_regresa <> 0 then
			MessageBox("Advertencia","Error al Consultar los consolidados de los movimientos de estacionamiento:["+string(al_cuenta)+"-"+obten_digito(al_cuenta)+"]",StopSign!)
			return -1
		end if
	end if
	commit using ltr_esta;
		
//Procesamiento de consolidados por cuenta de la base de Estacionamiento
	ls_instruccion = "sp_ProcesarConsolidadoxcta "+ string(al_cuenta)
	ls_consulta = ltr_esta.SyntaxFromSQL(ls_instruccion,'Style(Type=Grid)', ls_error_exec)
	if  len(ls_error_exec) > 0 then
		MessageBox("Control de Estacionamiento ", "No es posible ejecutar sp_ProcesarConsolidadoxcta:["+string(al_cuenta)+"-"+obten_digito(al_cuenta)+"]"+  ls_error_exec ,StopSign!)
		return -1
	else
		lds_info = CREATE datastore
		lds_info.Create(ls_consulta, ls_error_sin)
		lds_info.settransobject( ltr_esta)
		li_regresa = lds_info.retrieve()
		if li_regresa <> 0 then
			MessageBox("Advertencia","Error al Procesar los consolidados de los movimientos de estacionamiento:["+string(al_cuenta)+"-"+obten_digito(al_cuenta)+"]",StopSign!)
			return -1
		end if
	end if
	commit using ltr_esta;
		
	lds_movalumnos_sql = CREATE datastore
	lds_movalumnos_sql.dataobject = "dw_consolidadoxcta"
	lds_movalumnos_sql.settransobject( ltr_esta )
//Consulta los registros de mov_alumnos resultantes del procesamiento de la base de Estacionamiento
	li_retrieve_movalumnos_sql = lds_movalumnos_sql.retrieve(al_cuenta)
	if li_retrieve_movalumnos_sql	= -1 then
		messageBox("Error de consulta","No es posible consultar los registros de mov_alumnos de estacionamiento:["+string(al_cuenta)+"-"+obten_digito(al_cuenta)+"]",StopSign!)
		return -1
	end if
	
	ll_total_leidos = lds_movalumnos_sql.RowCount()
	ll_total_procesados = 1
		
	if ll_total_leidos = 0 then
//Se omite el mensaje para continuar el procesamiento	con el siguiente caso	
//		MessageBox( "Aviso","No hay registros de estacionamiento por transferir" )
		return 1
	end if
	
	li_estatus = 1
		
//Como se supone que la transferencia ya está detenida no es necesario detenerlo
//	if f_trans_sql_syb_detenido_update(li_estatus,ls_error) <> 1 then
//		Messagebox("Error",ls_error)
//		return -1
//	end if
		
	for ll_total_procesados = 1 to ll_total_leidos
// Obtiene los datos de la base de Estacionamiento en SQL e Inserta en Sybase: tesoreria_bd.mov_alumnos por el total
//		de consolidados por cuenta

		fecha = lds_movalumnos_sql.getitemdatetime(ll_total_procesados,"fecha")
		fecha_vencimiento = lds_movalumnos_sql.getitemdatetime(ll_total_procesados,"fecha_vencimiento")
			
		ll_renglon_nvo = lds_mov_alumnos.insertrow(0)
			
		lds_mov_alumnos.object.cve_concepto 			[ll_renglon_nvo]	= 47
		lds_mov_alumnos.object.cve_subconcepto 		[ll_renglon_nvo]	= 1
		lds_mov_alumnos.object.cve_descripcion 		[ll_renglon_nvo]	= 14
		lds_mov_alumnos.object.cve_caja					[ll_renglon_nvo]	= 163
		lds_mov_alumnos.object.cuenta 					[ll_renglon_nvo]	= lds_movalumnos_sql.GetItemNumber(ll_total_procesados,"cuenta")
		lds_mov_alumnos.object.periodo 					[ll_renglon_nvo]	= lds_movalumnos_sql.GetItemNumber(ll_total_procesados,"periodo")
		lds_mov_alumnos.object.anio 						[ll_renglon_nvo]	= lds_movalumnos_sql.GetItemNumber(ll_total_procesados,"anio")
		lds_mov_alumnos.object.fecha						[ll_renglon_nvo]	= fecha
		lds_mov_alumnos.object.fecha_vencimiento		[ll_renglon_nvo]	= fecha_vencimiento
		lds_mov_alumnos.object.importe					[ll_renglon_nvo]	= lds_movalumnos_sql.GetItemNumber(ll_total_procesados,"importe")
		lds_mov_alumnos.object.corte						[ll_renglon_nvo]	= lds_movalumnos_sql.GetItemNumber(ll_total_procesados,"corte")
		lds_mov_alumnos.object.operacion				[ll_renglon_nvo]	= 0
		lds_mov_alumnos.object.folio_mov_alumnos 	[ll_renglon_nvo]	= 0
		
		lds_movalumnos_sql.object.traspasado[ll_total_procesados] = 1

//Guarda en mov_alumnos de la base de estacionamiento SQLServer			
		if lds_movalumnos_sql.update() = 1 then
//Guarda en mov_alumnos de la base de tesoreria Sybase
			if lds_mov_alumnos.update() = 1 then
//OK				
			else
				MessageBox("Error","Error al insertar los movimientos de estacionamiento en Sybase en la cuenta: "+string(lds_movalumnos_sql.GetItemNumber(ll_total_procesados,"cuenta")) )
				Rollback using ltr_sit;				
				return -1
			end if
		else
			MessageBox("Error","Error al actualizar el status de traspasado a los movimientos de estacionamiento: ")
			Rollback using ltr_sit;
			return -1
		end if
			
	next
		
	commit using ltr_esta;
	Commit using ltr_sit;
		
// En la funcion principal habrá que liberar el proceso de transferencia
//	li_estatus = 0
//	if f_trans_sql_syb_detenido_update(li_estatus,ls_error) <> 1 then
//		Messagebox("Error",ls_error)
//		return -1
//	end if
		

return 1

end function

